{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Netbox Celery Plugin","text":"<p>    An App for Netbox. </p>"},{"location":"#overview","title":"Overview","text":"<p>The Netbox Celery plugin is a Netbox plugin to provide support for celery. This plugin can be used base for any automation tasks.</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#celery-results-list","title":"Celery Results List","text":""},{"location":"#celery-result-details","title":"Celery Result Details","text":""},{"location":"#installation","title":"Installation","text":"<ol> <li>Install the package using pip:</li> </ol> <pre><code>pip install netbox-celery\n</code></pre> <ol> <li>Add plugin to <code>PLUGINS</code> in configuration:</li> </ol> <pre><code>PLUGINS = [\n...\n\"netbox_celery\",\n...\n]\n</code></pre>"},{"location":"beat/","title":"Celery Beat","text":"<p>Celery beat is a scheduler; It kicks off tasks at regular intervals, that are then executed by available worker nodes in the cluster.</p> <p>Celery beat documentation can be found here.</p>"},{"location":"beat/#creating-a-periodic-task","title":"Creating a Periodic Task","text":"<p>Celery beat periodic jobs can be configured in the Django admin panel by following the standards defined by Celery.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#package-and-plugin-configuration","title":"Package and Plugin Configuration","text":"<ol> <li> <p>Install the package using pip:</p> <pre><code>pip install netbox-celery\n</code></pre> </li> <li> <p>Add plugin to <code>PLUGINS</code> in configuration:</p> <pre><code>PLUGINS = [\n...\n\"netbox_celery\",\n...\n]\n</code></pre> </li> </ol>"},{"location":"install/#additional-processes","title":"Additional Processes","text":"<p>To be able to run jobs, three process will need to be started:</p> <ul> <li>Redis Server</li> <li>Celery Worker</li> <li>Celery Beat (optional)</li> </ul>"},{"location":"install/#local","title":"Local","text":"<p>The following steps are for local development. For any server deployments please use docker.</p>"},{"location":"install/#redis-server","title":"Redis Server","text":"<p>For netbox to work, mostly you will already have redis-server installed.</p> <ol> <li> <p>Install <code>redis-server</code> to the linux machine (https://redis.io/docs/getting-started/):</p> <pre><code># Debian\n$ sudo apt-get install redis\n\n# Redhat/Centos\n$ sudo yum install redis\n\n# Mac\n$ brew install redis-server\n</code></pre> </li> <li> <p>Start <code>redis-server</code> service.</p> </li> <li> <p>Test installation:</p> <pre><code>$ redis-cli ping\nPONG\n</code></pre> </li> </ol>"},{"location":"install/#celery-worker","title":"Celery Worker","text":"<ol> <li>Enable virtual environment if using one.</li> <li>Change directory to netbox folder where <code>manage.py</code> is located.</li> <li> <p>Start worker. Options (The order is important):</p> <ul> <li>A:     Defines the app Celery needs to use. This should always be <code>netbox_celery</code> plugin.</li> <li>arg:    Entry point for celery</li> <li>l:     Log level for celery</li> </ul> <pre><code>celery -A netbox_celery worker -l INFO\n</code></pre> </li> </ol> <p>The output should display all available tasks inside of your netbox instance.</p> <pre><code>\u276f celery -A netbox_celery worker -l INFO\n\n-------------- celery@Kristians-MacBook-Pro.local v5.2.7 (dawn-chorus)\n--- ***** ----- -- ******* ---- macOS-13.0-arm64-arm-64bit 2023-03-23 12:16:58\n- *** --- * --- - ** ---------- [config]\n- ** ---------- .&gt; app:         netbox_celery:0x105ca71c0\n- ** ---------- .&gt; transport:   redis://localhost:6379//\n- ** ---------- .&gt; results:     redis://localhost:6379/0\n- *** --- * --- .&gt; concurrency: 10 (prefork)\n-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)\n--- ***** ----- -------------- [queues]\n.&gt; celery           exchange=celery(direct) key=celery\n\n[tasks]\n. netbox_config_backup:backup_device\n  . netbox_config_backup:backup_email_report\n  . netbox_device_onboarder:device_onboard\n\n[2023-03-23 12:17:00,105: INFO/MainProcess] Connected to redis://localhost:6379//\n[2023-03-23 12:17:00,108: INFO/MainProcess] mingle: searching for neighbors\n[2023-03-23 12:17:01,141: INFO/MainProcess] mingle: all alone\n</code></pre>"},{"location":"install/#celery-beat","title":"Celery Beat","text":"<ol> <li>Enable virtual environment if using one.</li> <li>Change directory to netbox folder where <code>manage.py</code> is located.</li> <li> <p>Start worker. Options (The order is important):</p> <ul> <li>A: Defines the app Celery needs to use. This should always be <code>netbox_celery</code> plugin.</li> <li>arg: Entry point for celery</li> <li>l: Log level for celery</li> <li>S: Defines custom scheduling class necessary to work with <code>CeleryResult</code> model.</li> </ul> <pre><code>celery -A netbox_celery beat -l INFO -S netbox_celery.schedule.NetboxCeleryDatabaseScheduler\n</code></pre> </li> </ol> <p>The output should display all available tasks inside of your netbox instance.</p> <pre><code>celery beat v5.2.7 (dawn-chorus) is starting.\n__    -    ... __   -        _\nLocalTime -&gt; 2023-03-23 12:21:56\nConfiguration -&gt;\n    . broker -&gt; redis://localhost:6379//\n    . loader -&gt; celery.loaders.app.AppLoader\n    . scheduler -&gt; netbox_celery.schedule.NetboxCeleryDatabaseScheduler\n\n. logfile -&gt; [stderr]@%INFO\n    . maxinterval -&gt; 5.00 seconds (5s)\n[2023-03-23 12:21:56,254: INFO/MainProcess] beat: Starting...\n</code></pre>"},{"location":"models/","title":"CeleryResult","text":""},{"location":"models/#attributes","title":"Attributes","text":"<ul> <li>task_id (UUIDField): The UUID of the task.</li> <li>celery_name (CharField): The name of the celery task.</li> <li>created (DateTimeField): The date and time the task was created.</li> <li>completed (DateTimeField): The date and time the task was completed.</li> <li>user (ForeignKey): The user that created the task.</li> <li>status (CharField): The status of the task.</li> <li>args (JSONField): The args of the task.</li> <li>kwargs (JSONField): The kwargs of the task.</li> <li>job_kwargs (JSONField): The job_kwargs of the task.</li> <li>result (JSONField): The result of the task.</li> </ul>"},{"location":"models/#enqueue_job-method","title":"<code>enqueue_job()</code> method","text":"<p>This method of the model runs the task against Celery. When using this model to create a task, this is the only function that should be ran.</p> <p>Example:</p> <pre><code>from netbox_celery.models import CeleryResult\njob = CeleryResult.enqueue_job(\n\"example_plugin:example_job\",       # Name/Path of celery function\nuser=None,                          # User who initiated the job\ncelery_kwargs={\"countdown\": 10},    # kwargs that are passed into `apply_async`\nargs=[],                            # args that are passed into celery task function\nkwargs=[],                          # kwargs that are passed into celery task function\n)\n</code></pre> <p>Above shows how to initiate a celery job using the model. This will create a new entry in the model and add the job to the celery que. This will then be picked up by an available worker.</p>"},{"location":"tasks/","title":"Celery Tasks","text":"<p>Tasks are the building blocks of Celery applications.</p> <p>A task is a class that can be created out of any callable. It performs dual roles in that it defines both what happens when a task is called (sends a message), and what happens when a worker receives that message.</p> <p>Every task class has a unique name, and this name is referenced in messages so the worker can find the right function to execute. The task will be referenced from the plugin name and the task name.</p>"},{"location":"tasks/#base-class-netbox_celerytaskscelerybasetask","title":"Base Class <code>netbox_celery.tasks.CeleryBaseTask</code>","text":"<p>To ensure every task built in other projects has all the required features necessary for <code>netbox_celery</code> to work, a base class as been implemented for all Celery tasks.</p>"},{"location":"tasks/#building-a-celery-task","title":"Building a Celery Task","text":"<p>The example below shows a very simple Celery task. Using the <code>shared_task</code> decorator with the three key word arguments creates a registered tasks which a worker can pick up.</p> <p>Required key work arguments:</p> <ul> <li><code>name</code> (str): Defines the name of the task. The plugin name should be used to stop any overlapping tasks.</li> <li><code>base</code> (class): Set the base class to bind with.</li> <li><code>bind</code> (bool): Binds the function with the base class.</li> </ul> <p>When the task is bound to the base, it inherits functions for logging and reporting task status. It also overwrites the <code>run()</code> function in the base class with the code from your function.</p> <p>Whenever <code>CeleryBaseTask</code> is used, the first argument in the celery function needs to be <code>task_id</code>. This allows the backend to retrieve the correct <code>CeleryResult</code> object from the ORM. Additional arguments can be added after <code>task_id</code> depending on the function.</p> <pre><code># Example script\nfrom celery import shared_task\nfrom netbox_celery.tasks import CeleryBaseTask\n@shared_task(name=\"netbox_example_plugin:hello_world\", base=CeleryBaseTask, bind=True)\ndef hello_world(self, task_id):\nself.log(\"Hello World!\")\n</code></pre> <pre><code># Example output\ncelery -A netbox_celery worker -E -l INFO\n\n-------------- celery@opticore v5.2.7 (dawn-chorus)\n--- ***** -----\n-- ******* ---- macOS-13.0-arm64-arm-64bit 2023-03-29 12:03:47\n- *** --- * ---\n- ** ---------- [config]\n- ** ---------- .&gt; app:         netbox_celery:0x10a1adf10\n- ** ---------- .&gt; transport:   redis://localhost:6379//\n- ** ---------- .&gt; results:     redis://localhost:6379/0\n- *** --- * --- .&gt; concurrency: 10 (prefork)\n-- ******* ---- .&gt; task events: ON\n--- ***** ----- -------------- [queues]\n.&gt; celery           exchange=celery(direct) key=celery\n\n[tasks]\n. netbox_example_plugin:hello_world\n\n[2023-03-29 12:03:50,308: INFO/MainProcess] celery@opticoreit ready.\n[2023-03-29 12:06:52,237: INFO/MainProcess] Task netbox_example_plugin:hello_world[d3d71f5b-fd0a-4a9e-9043-c381f72b5899] received\n[2023-03-29 12:07:04,367: INFO/ForkPoolWorker-8] Task netbox_example_plugin:hello_world[d3d71f5b-fd0a-4a9e-9043-c381f72b5899] succeeded in 12.120981917000023s: None\n</code></pre>"}]}